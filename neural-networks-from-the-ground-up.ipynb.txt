{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Neural Networks From the Ground Up\n",
    "## The Perceptron\n",
    "- A perceptron is a *binary classifier* in the sense that it takes *n* inputs and produces one output that is either a 0 or a 1. \n",
    "- For each input that comes into a perceptron, the input is multiplied by some weight. The results of all the products of inputs with their respective weights are summed. \n",
    "- If the sum is greater than some *threshold* value, then the perceptron outputs a 1. Otherwise, the perceptron outputs a 0.\n",
    "\n",
    "- Eventually, we will see that we can write algorithms to \"learn\" the required weight values automatically. For now, we will select the weight values manually.\n",
    "\n",
    "- Strictly speaking a Perceptron is an *algorithm*. However, we can also create program *objects* that capture the relevant data structures and logic associated with a Perceptron. \n",
    "\n",
    "- The following Perceptron class can be used to compute *some*, but not all boolean functions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "\n",
    "class Perceptron (object):\n",
    "    '''implementation of an artificial perceptron'''\n",
    "    def __init__ (self, weights, threshold):\n",
    "        '''`weights` is a numpy array of numbers'''\n",
    "        self.weights = weights\n",
    "        self.threshold = threshold\n",
    "        \n",
    "    def sum_of_products (self, inputs):\n",
    "        return np.sum (inputs * self.weights)\n",
    "    \n",
    "    def step_function (self, z):\n",
    "        '''returns the result of applying a step function to the sum of products`'''\n",
    "        if z <= threshold:\n",
    "            return 0\n",
    "        return 1\n",
    "    \n",
    "    def compute (self, inputs):\n",
    "        '''computes a result based on the supplied inputs, weights, and threshold.'''\n",
    "        # sum of products is traditionally called `z`\n",
    "        z = self.sum_of_products (inputs)\n",
    "        # perceptron output is traditionally called `y`\n",
    "        y = self.step_function (z)\n",
    "        return y"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the above, we can see that the definition of a Perceptron is *very simple*. The Perceptron takes its inputs and feeds them into a sum of products function to obtain an intermediate output `z`. The Perceptron then takes the intermediate output `z` and feeds it into a step funciton to obtain a final result `y`. The value of `y` is either 0 or 1 depending upon whether or not the value of `z` surpasses the defined threshold value. \n",
    "\n",
    "Symbolically, the output `y` of a Perceptron is computed as:\n",
    "\n",
    "y = step (sum_of_products (**x**, **w**)),\n",
    "\n",
    "where both **x** and **w** are vectors of length *n*.\n",
    "\n",
    "This definition of a Perceptron is motivated by the structure of a typical biological neuron, which takes in many inputs via its dendrites, and returns one output via its axon. The weights in an artificial neuron correspond to the connection strengths between biological neurons, the sum of products and step function in an artificial neuron correspond to the body of a biological neuron, and the output of the neuron corresponds to the signal sent down the axon of a biological neuron.\n",
    "\n",
    "The following is an example of a Perceptron that computes the AND function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AND (0, 0): 0\n",
      "AND (1, 0): 0\n",
      "AND (0, 1): 0\n",
      "AND (1, 1): 1\n"
     ]
    }
   ],
   "source": [
    "weights = np.array ([0.5, 0.5])\n",
    "threshold = 0.7\n",
    "\n",
    "perceptron = Perceptron (weights, threshold)\n",
    "\n",
    "# pass different input values to the same perceptron \n",
    "inputs = np.array ([0, 0])\n",
    "print ('AND (0, 0):', perceptron.compute (inputs))\n",
    "\n",
    "inputs = np.array ([1, 0])\n",
    "print ('AND (1, 0):', perceptron.compute (inputs))\n",
    "\n",
    "inputs = np.array ([0, 1])\n",
    "print ('AND (0, 1):', perceptron.compute (inputs))\n",
    "\n",
    "inputs = np.array ([1, 1])\n",
    "print ('AND (1, 1):', perceptron.compute (inputs))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- We could have chosen many other combinations of weights and threshold values to compute the AND functions. \n",
    "- The point is that *only some choices work and others do not*.\n",
    "\n",
    "TODOS:\n",
    "\n",
    "1. motivate perceptron learning rule\n",
    "2. graph what the line looks like of the perceptron\n",
    "3. show the line for one perceptron. \n",
    "4. how the line for composed perceptrons in the case of XOR\n",
    "5. show how the line changes in the context of training perceptrons"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can better understand how the Perceptron works by plotting the four possible input/output pairs associated with the AND function in the x1-x2 plane, where the symbol '+' at the point (x1, x2) indicatest that the output of the AND function is 1 at that point, and the symbol '-' means the output of the AND function is 0 at that point:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "plt.plot([1.0], [1.0], 'r+', markersize=12)\n",
    "plt.plot([0], [0], 'b_', markersize=12)\n",
    "plt.plot([1], [0], 'b_', markersize=12)\n",
    "plt.plot([0], [1], 'b_', markersize=12)\n",
    "\n",
    "plt.axis([-1, 2, -1, 2])\n",
    "\n",
    "plt.xlabel ('x1')\n",
    "plt.ylabel ('x2')\n",
    "plt.title ('AND function input/output pairs')\n",
    "plt.show ()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can visualize how the Perceptron distinguishes between these points by deriving the equaiton for a line from the logic of the Perceptron.\n",
    "\n",
    "The sum of products of our Perceptron has the form:\n",
    "\n",
    "x1w1 + x2w2.\n",
    "\n",
    "Since the threshold of 0.7 marks the cutoff point at which the output switches from 0 to 1, we can see that the equation for the boundary of the perceptron is:\n",
    "\n",
    "x1w1 + x2w2 = 0.7.\n",
    "\n",
    "Solving this equation for x2 in terms of x1, we have that:\n",
    "\n",
    "x2 = f(x1) = (0.7 -x1w1) / w2\n",
    "\n",
    "Plotting this line on our above graph, we get:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def perceptron_and_decision_boundary (x1):\n",
    "    '''computes the descision boundary for the above Perceptron'''\n",
    "    return (0.7 -x1*0.5) / 0.5\n",
    "\n",
    "plt.plot([1.0], [1.0], 'r+', markersize=12)\n",
    "plt.plot([0], [0], 'b_', markersize=12)\n",
    "plt.plot([1], [0], 'b_', markersize=12)\n",
    "plt.plot([0], [1], 'b_', markersize=12)\n",
    "\n",
    "plt.axis([-1, 2, -1, 2])\n",
    "\n",
    "# plot a line segment that connects two arbitrary points on the decision boundary \n",
    "x = [-1, 2]\n",
    "plt.plot (x, [perceptron_and_decision_boundary (-1), perceptron_and_decision_boundary (2)])\n",
    "\n",
    "plt.xlabel ('x1')\n",
    "plt.ylabel ('x2')\n",
    "plt.title ('AND function input/output pairs')\n",
    "plt.show ()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the above, we can see that a single Perceptron can only ever compute a boolean function if it is possible to draw a straight line in the x1, x2 plane that divides the various input/output pairs associated with that function. We call such a function *linearly separable*. \n",
    "\n",
    "If we draw a similar diagram for the XOR function, we can see at once that *no single Perceptron could ever learn the XOR function*:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot([1.0], [1.0], 'b_', markersize=12)\n",
    "plt.plot([0], [0], 'b_', markersize=12)\n",
    "plt.plot([1], [0], 'r+', markersize=12)\n",
    "plt.plot([0], [1], 'r+', markersize=12)\n",
    "\n",
    "plt.axis([-1, 2, -1, 2])\n",
    "\n",
    "plt.xlabel('x1')\n",
    "plt.ylabel('x2')\n",
    "plt.title ('XOR function input/output pairs')\n",
    "plt.show ()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the above diagram, we can see that regardless of how we choose to draw the line, one line by itself can never distinguish between the input/output pairs that have an output of 0, and the input/output pairs that have an output of 1 in the context of the XOR function. In other words, *one Perceptron is incapable of computing the XOR function*. We will see later how to work around this problem.\n",
    "\n",
    "Although the above implementation of the Perceptron works, it will not generalize to a context in which we want to learn all relevant parameters automatically. In particular, we will eventually come up with an algorithm that allows the required weights to be learned automatically. However, as our Perceptron stands currently, we need to set the threshold value separately from the weights.\n",
    "\n",
    "The trick that allows us to fold learning the threshold into the process that learns the weights is inclusion of an additional term called a *bias*. \n",
    "\n",
    "To see how we can use a bias to include the threshold in the weights, consider that the step function is defined as follows:\n",
    "\n",
    "1. step (z) = 0 if z <= threshold \n",
    "2. step (z) = 1 if z > threshold \n",
    "\n",
    "The second condition is equivalent to the condition:\n",
    "\n",
    "3. step (z) = 1 if z - threshold > 0.\n",
    "\n",
    "In other words, we can simply set our \"pseudo-threshold\" to 0 and learn the real threshold by considering as just another term that is included in the sum of products (the minus sign can be corrected by learning the appropriate weight).\n",
    "\n",
    "The following is an example of a Perceptron that computes the AND function using a bias term:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AND (0, 0): 0\n",
      "AND (1, 0): 0\n",
      "AND (0, 1): 0\n",
      "AND (1, 1): 1\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "\n",
    "class Perceptron (object):\n",
    "    '''implementation of an artificial perceptron using a bias term'''\n",
    "    def __init__ (self, weights):\n",
    "        '''`weights` is a numpy array of numbers'''\n",
    "        self.weights = weights\n",
    "        \n",
    "    def sum_of_products (self, inputs):\n",
    "        # the input corresponding to the bias weight is always 1\n",
    "        new_inputs = np.insert (inputs, 0, 1.0, axis=0)\n",
    "        return np.sum (new_inputs * self.weights)\n",
    "    \n",
    "    def step_function (self, z):\n",
    "        '''returns the result of applying the step function to the sum of products`'''\n",
    "        if z <= 0:\n",
    "            return 0\n",
    "        return 1\n",
    "    \n",
    "    def compute (self, inputs):\n",
    "        '''computes a result based on the supplied inputs, weights, and threshold.'''\n",
    "        # sum of products is traditionally called `z`\n",
    "        z = self.sum_of_products (inputs)\n",
    "        # perceptron output is traditionally called `y`\n",
    "        y = self.step_function (z)\n",
    "        return y\n",
    "\n",
    "# bias term is always first in the weight vector by convention    \n",
    "weights = np.array ([-0.7, 0.5, 0.5])\n",
    "\n",
    "perceptron = Perceptron (weights)\n",
    "\n",
    "# pass different input values to the same perceptron \n",
    "inputs = np.array ([0, 0])\n",
    "print ('AND (0, 0):', perceptron.compute (inputs))\n",
    "\n",
    "inputs = np.array ([1, 0])\n",
    "print ('AND (1, 0):', perceptron.compute (inputs))\n",
    "\n",
    "inputs = np.array ([0, 1])\n",
    "print ('AND (0, 1):', perceptron.compute (inputs))\n",
    "\n",
    "inputs = np.array ([1, 1])\n",
    "print ('AND (1, 1):', perceptron.compute (inputs))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice that in our above implementation of a Perceptron, we no longer need to explicitly pass in a threshold value as input. Instead, we adopt the convention that the threshold weight is first in the list of weights, and the input corresponding to that weight is always 1."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The following is an example of a Perceptron that computes the OR function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "OR (0, 0): 0\n",
      "OR (1, 0): 1\n",
      "OR (0, 1): 1\n",
      "OR (1, 1): 1\n"
     ]
    }
   ],
   "source": [
    "weights = np.array ([-0.2, 0.5, 0.5])\n",
    "\n",
    "perceptron = Perceptron (weights)\n",
    "\n",
    "# pass different input values to the same perceptron \n",
    "inputs = np.array ([-0, 0])\n",
    "print ('OR (0, 0):', perceptron.compute (inputs))\n",
    "\n",
    "inputs = np.array ([1, 0])\n",
    "print ('OR (1, 0):', perceptron.compute (inputs))\n",
    "\n",
    "inputs = np.array ([0, 1])\n",
    "print ('OR (0, 1):', perceptron.compute (inputs))\n",
    "\n",
    "inputs = np.array ([1, 1])\n",
    "print ('OR (1, 1):', perceptron.compute (inputs))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The following is an example of a Perceptron that computes the NAND function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "NAND (0, 0): 1\n",
      "NAND (1, 0): 1\n",
      "NAND (0, 1): 1\n",
      "NAND (1, 1): 0\n"
     ]
    }
   ],
   "source": [
    "weights = np.array ([0.7, -0.5, -0.5])\n",
    "\n",
    "perceptron = Perceptron (weights)\n",
    "\n",
    "# pass different input values to the same perceptron \n",
    "inputs = np.array ([0, 0])\n",
    "print ('NAND (0, 0):', perceptron.compute (inputs))\n",
    "\n",
    "inputs = np.array ([1, 0])\n",
    "print ('NAND (1, 0):', perceptron.compute (inputs))\n",
    "\n",
    "inputs = np.array ([0, 1])\n",
    "print ('NAND (0, 1):', perceptron.compute (inputs))\n",
    "\n",
    "inputs = np.array ([1, 1])\n",
    "print ('NAND (1, 1):', perceptron.compute (inputs))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It turns out that using our current Perceptron, we cannot compute the XOR function using just one Perceptron. This was famously pointed out by Minsky and Papert in their 1988 book \"Perceptrons\". The reason for this limitation the sum of products involved in our in our current definition of a Perceptron is a *linear* function. As a result, we can only use a Perceptron to compute functions whose input/output pairs can be seperated by a straight line, a plane, or a hyperplane (in more than 3 dimensions).\n",
    "\n",
    "However, although we cannot compute the XOR function using just *one* Perceptron, we *can* compute the XOR function if we *compose* more than one Perceptron in a chain. This notion of composing multiple neurons to solve a problem that is impossible for just one neuron to solve is the central theme in the construction of arbtrarily complex neural networks.\n",
    "\n",
    "In particular, it is known that the XOR function can be computed by composing the NAND, OR and AND functions together.\n",
    "\n",
    "The following is an example of how multiple Perceptrons can be used to compute the NAND function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "XOR (0, 0): 0\n",
      "XOR (1, 0): 1\n",
      "XOR (0, 1): 1\n",
      "XOR (1, 1): 0\n"
     ]
    }
   ],
   "source": [
    "def XOR (x1, x2):\n",
    "    '''computes the XOR function by composing three perceptrons'''\n",
    "    # collect inputs into an array\n",
    "    inputs = np.array ([x1, x2])\n",
    "    \n",
    "    # initialize NAND perceptron\n",
    "    weights_nand = np.array ([0.7, -0.5, -0.5])\n",
    "    perceptron_nand = Perceptron (weights_nand)\n",
    "    \n",
    "    # initialize OR perceptron\n",
    "    weights_or = np.array ([-0.2, 0.5, 0.5])\n",
    "    perceptron_or = Perceptron (weights_or)\n",
    "    \n",
    "    # initialize AND perceptron\n",
    "    weights_and = np.array ([-0.7, 0.5, 0.5])\n",
    "    perceptron_and = Perceptron (weights_and)\n",
    "\n",
    "    nand_result = perceptron_nand.compute (inputs)\n",
    "    or_result = perceptron_or.compute (inputs)\n",
    "    \n",
    "    # AND together previous two results\n",
    "    new_inputs = np.array ([nand_result, or_result])\n",
    "    and_result = perceptron_and.compute (new_inputs)\n",
    "    \n",
    "    return and_result\n",
    "\n",
    "# pass different input values to the same perceptron \n",
    "print ('XOR (0, 0):', XOR (0, 0))\n",
    "print ('XOR (1, 0):', XOR (1, 0))\n",
    "print ('XOR (0, 1):', XOR (0, 1))\n",
    "print ('XOR (1, 1):', XOR (1, 1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The above implementation of the XOR function uses a *multi-layer perceptron* consisting of three layers: one input layer followed by two perceptron layers. The first layer of the above perceptron network involves the inputs into the network, but does not include any perceptrons. The second layer of the network consists of one perceptron that computes the NAND function, and a second perceptron that computes the OR function. Each of the two inputs from the first layer of the network is passed to each perceptron in the first layer as inputs into that perceptron. The third and last layer of the above perceptron network consists of an AND perceptron. The AND perceptron receives one input from the output of the previous NAND gate, and a second input from the output of the previous OR gate.\n",
    "\n",
    "It is known that any computer can be built out of only NAND gates. Therefore, the fact that perceptrons can be wired together to build a NAND gate impliest that an entire computer can be built out of perceptrons. \n",
    "\n",
    "We can think of such a network of Perceptrons as a *directed graph* where each node corresponds to one Perceptron. A directed edge from Perceptron A to Perceptron B indicates that the output of Perceptron A is fed into Perceptron B as input.\n",
    "\n",
    "Now that we have included a bias term in our Perceptrons, the general equation for the decision boundary associated with a given Perceptron is:\n",
    "\n",
    "w0x0 + w1x1 + w2x2 = 0\n",
    "\n",
    "solving for x2 in terms of x1 and recalling that x0 is always set to 1 gives us:\n",
    "\n",
    "x2 = f(x1) = -x1 * (w1 / w2) - (w0 / w2).\n",
    "\n",
    "This corresponds to a straight line with slope w1 / w2 and with y-interecept -(w0 /w2). We can compute this function as follows:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can visualize the decision boundaries learned by our above implementation of the XOR function as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def get_points (w0, w1, w2):\n",
    "    '''returns x and y coordinates of two points on the descision boundary of a Perceptron'''\n",
    "    xs = [0, -w0 / w1]\n",
    "    ys = [-w0 / w2, 0]\n",
    "    return [xs, ys]\n",
    "\n",
    "plt.plot([1.0], [1.0], 'b_', markersize=12)\n",
    "plt.plot([0], [0], 'b_', markersize=12)\n",
    "plt.plot([1], [0], 'r+', markersize=12)\n",
    "plt.plot([0], [1], 'r+', markersize=12)\n",
    "\n",
    "plt.axis([-1, 2, -1, 2])\n",
    "\n",
    "# NAND\n",
    "nand_points = get_points (0.7, -0.5, -0.5)\n",
    "x = nand_points[0]\n",
    "y = nand_points[1]\n",
    "plt.plot (x, y)\n",
    "\n",
    "# OR\n",
    "or_points = get_points (-0.2, 0.5, 0.5)\n",
    "x = or_points[0]\n",
    "y = or_points[1]\n",
    "plt.plot (x, y)\n",
    "\n",
    "plt.xlabel ('x1')\n",
    "plt.ylabel ('x2')\n",
    "plt.title ('XOR function input/output pairs')\n",
    "plt.show ()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the above, we can see that although one Perceptron cannot compute the XOR function, multiple Perceptrons can learn the XOR function, since each Perceptron draws a different decision boundary, and these two decision boundaries can then be ANDed together.\n",
    "\n",
    "In general, if a given network has *n* perceptrons, then it can distinguish between 2^n different categories."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training A Perceptron - based on *Neural Network Design*, by Demuth and De jesus\n",
    "\n",
    "Above, we saw that if we can somehow figure out the required weights, we can set them manually on Perceptrons to compute various boolean functions. However, this is a tedious process that will not scale to solving difficult problems.\n",
    "\n",
    "Instead, we are interested in a method that can *automatically discover* the weights required to compute a given function. \n",
    "\n",
    "In any Perceptron training situation, there are only three possible outcomes:\n",
    "\n",
    "1. The out of the perceptron is 0 when it should have been a 1.\n",
    "2. The output of the perceptron is 1 when it should have been a 0.\n",
    "3. The output of the perceptron matches the expected output. \n",
    "\n",
    "The question now becomes: in the context of training, how can we update the weights at each step to get closer the expected output? \n",
    "\n",
    "In the first case, the output of the Perceptron is too low. Therefore, a reasonable idea is to *add* the input vector to the weight vector in the hopes of obtaining a larger output. \n",
    "\n",
    "In the second case, the output of the Perceptron is too high. Therefore, a reasonable idea is to *subtract* the input vector from the weight vector in the hopes of obtaining a smaller output.\n",
    "\n",
    "In the third case, we do nothing to the weight vector, since if it ain't broke, don't fix it.\n",
    "\n",
    "If we call the expected output `t` and the actual output of the Perceptron `y`, then we can summarize the above update rules as follows:\n",
    "\n",
    "1. If `t` = 1 and `y` = 0, then the new weight vector equals whatever the old weight vector was, plus the input vector.\n",
    "\n",
    "2. If `t` = 0 and `y` = 1, then the new weight vector equals whatever the old vector weight was, minus the input vector.\n",
    "\n",
    "3. If `t` = `y`, then the new weight vector equals whatever the old weight vector was.\n",
    "\n",
    "If we define the quantity `e` = `t` - `y`, then we can re-write the above three rules as:\n",
    "\n",
    "1. `e` = 1, then the new weight vector equals whatever the old weight vector was, plus the input vector.\n",
    "\n",
    "2. If `e` = -1, then the new weight vector equals whatever the old weight vector was, minus the input vector.\n",
    "\n",
    "3. If `e` = 0, then the new weight vector equals whatever the old weight vector was.\n",
    "\n",
    "Since `e` can only take on one of the three values -1, 1, or 0, we can condense the above three rules into just one update rule:\n",
    "\n",
    "1. The new weight vecotr equals whatever the old weight vector was plus `e` multiplied by the input vector.\n",
    "\n",
    "The strategy to train one Perceptron is then as follows:\n",
    "\n",
    "1. initialize the weight vector to the zero vector.\n",
    "2. Select one input/output pair.\n",
    "3. Present the input values to the perceptron to compute the perceptron's output y.\n",
    "4. If the output y is different from the expected output in the input/output pair, then adjust the weights according to the following rule:\n",
    "\n",
    "The new weight vecotr equals `e` multiplied by the old weight vector.\n",
    "\n",
    "5. Repeat steps 2, 3, and 4 until the perceptron predicts all examples correctly.\n",
    "\n",
    "We can include the above training algorithm in an improved version of our Perceptron class and use it to compute the AND function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AND (0, 0): 0\n",
      "AND (0, 1): 0\n",
      "AND (1, 0): 0\n",
      "AND (1, 1): 1\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "class PerceptronLearner (object):\n",
    "    '''\n",
    "       implementation of an artificial perceptron which includes a training method.\n",
    "       \n",
    "       based on https://www.thomascountz.com/2018/04/05/19-line-line-by-line-python-perceptron\n",
    "    '''\n",
    "    def __init__ (self, training_inputs, labels, iterations=100):\n",
    "        self.training_inputs = training_inputs \n",
    "        self.labels = labels\n",
    "        self.iterations = iterations\n",
    "        num_inputs = len (training_inputs[0])\n",
    "        self.weights = np.zeros (num_inputs + 1)\n",
    "           \n",
    "    def compute (self, inputs):\n",
    "        '''returns the output of the Perceptron'''\n",
    "        summation = np.dot (inputs, self.weights[1:]) + self.weights[0]\n",
    "        if summation > 0:\n",
    "            return 1\n",
    "        return 0\n",
    "\n",
    "    def train (self):\n",
    "        '''trains the perceptron to compute a linearly separable boolean function.'''\n",
    "        for _ in range (self.iterations):\n",
    "            for inputs, label in zip (self.training_inputs, self.labels):\n",
    "                prediction = self.compute (inputs)\n",
    "                self.weights[1:] += (label - prediction) * inputs\n",
    "                self.weights[0] += (label - prediction)\n",
    "\n",
    "# define training inputs\n",
    "training_inputs = []\n",
    "training_inputs.append (np.array([1, 1]))\n",
    "training_inputs.append (np.array([1, 0]))\n",
    "training_inputs.append (np.array([0, 1]))\n",
    "training_inputs.append (np.array([0, 0]))\n",
    "\n",
    "# list of expected output for each training input\n",
    "labels = np.array ([1, 0, 0, 0])\n",
    "\n",
    "# initialize the perceptron\n",
    "perceptron = PerceptronLearner (training_inputs, labels)\n",
    "\n",
    "# train the perceptron\n",
    "perceptron.train ()\n",
    "\n",
    "# use the trained Perceptron to compute the AND function \n",
    "input_1 = np.array ([0, 0])\n",
    "print ('AND (0, 0):', perceptron.compute (input_1))\n",
    "\n",
    "input_2 = np.array ([0, 1])\n",
    "print ('AND (0, 1):', perceptron.compute (input_2))\n",
    "\n",
    "input_3 = np.array ([1, 0])\n",
    "print ('AND (1, 0):', perceptron.compute (input_3))\n",
    "\n",
    "input_4 = np.array ([1, 1])\n",
    "print ('AND (1, 1):', perceptron.compute (input_4))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## From Perceptrons to Neurons\n",
    "\n",
    "The Perceptron model we saw above was originally set forth by McCulloch and Pitts in their 1943 paper, \"A Logical Calculus of the Ideas Immanent in Nervous Activity\" as a mathematical model of a single biological neuron. \n",
    "\n",
    "However, it turns out that **Perceptrons are hard to train**, in the sense of writing an algorithm that can *automatically* find the weights required to compute a given function. \n",
    "\n",
    "The difficulty of automatically training Perceptrons motivates us to look for a more *general* construct that easier to train than a Perceptron. \n",
    "\n",
    "We generalize the Perceptron by noticing that the computation performed by a peceptron involves composing two functions.\n",
    "\n",
    "1. One function *f* that computes the sum of products between the inputs and the weights.\n",
    "2. A second function *g* that takes the output of *f* as input and returns 1 if the sum of products is above the threshold, and 0 otherwise. We call such a function that outputs either 0 or 1 a *step function*, because its graph looks like a step.\n",
    "\n",
    "The observation that two functions are involved in a Perceptron's computation leads us to realize that we can generalize the Perceptron idea by keeping the first function that computes the sum of products, but *swapping out the second function for some other function instead*. \n",
    "\n",
    "We call whatever function we choose as this second function an *activation function*. The activation function can be any function that we find makes it easier for us to learn the required weights in an automated fahsion. In other words, the search space for finding a suitable activation function is the set of *all* functions that map R -> R. This is a *massive* search space! \n",
    "\n",
    "When we use an activation function other than a step function, we call the resulting unit a *neuron* rather than a *perceptron*.\n",
    "\n",
    "The step function used in the definition of a Perceptron is difficult to train automatically because it is not *differentiable at its transition point*. We can see why this is so by looking at the graph of a step function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pylab as plt\n",
    "\n",
    "\n",
    "def step_function (x):\n",
    "    '''given a numpy array, returns a numpy array that \n",
    "       maps each element of the input array to the result of \n",
    "       applying the step function to that array element.\n",
    "    '''\n",
    "    return np.array (x > 0, dtype=int)\n",
    "\n",
    "# create a NumPy array containing values from -5.0 to 5.0 in increments of 0.1\n",
    "x = np.arange (-5.0, 5.0, 0.1)\n",
    "\n",
    "# obtain the corresponding output NumPy array\n",
    "y = step_function (x)\n",
    "\n",
    "# plot input and output arrays\n",
    "plt.plot (x, y)\n",
    "\n",
    "# specify the range of the y-axis\n",
    "plt.ylim (-0.1, 1.1)\n",
    "\n",
    "# title\n",
    "plt.title ('step function')\n",
    "plt.show ()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the above, we can see that the graph of the step function transitions sharply from an output of 0 to an output of 1 when the input changes from being less than or equal to 0 to being strictly greater than 0. As a result, we cannot compute a tangent line at that point, and the function is not differentiable when the input equals 0. A step function is often called a \"staircase function\" because of the way it looks.\n",
    "\n",
    "One popular choice of an activation function which *is* differentiable is the *sigmoid function*, which can be computed in Python as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def sigmoid (x):\n",
    "    '''given a numpy array, returns a numpy array that \n",
    "       maps each element of the input array to the result of \n",
    "       applying the sigmoid function to that array element.\n",
    "    '''\n",
    "    # leverages NumPy broadcasting \n",
    "    return 1 / (1 + np.exp(-x))\n",
    "\n",
    "# create a NumPy array containing values from -5.0 to 5.0 in increments of 0.1\n",
    "x = np.arange (-5.0, 5.0, 0.1)\n",
    "\n",
    "# obtain the corresponding output NumPy array\n",
    "y = sigmoid (x)\n",
    "\n",
    "# plot input and output arrays\n",
    "plt.plot (x, y)\n",
    "\n",
    "# specify the range of the y-axis\n",
    "plt.ylim (-0.1, 1.1)\n",
    "\n",
    "# title\n",
    "plt.title ('sigmoid function')\n",
    "plt.show ()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can better compare the step function with the sigmoid function if we plot them both on the same graph:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create a NumPy array containing values from -5.0 to 5.0 in increments of 0.1\n",
    "x = np.arange (-5.0, 5.0, 0.1)\n",
    "\n",
    "# obtain the corresponding output NumPy array\n",
    "y1 = step_function (x)\n",
    "\n",
    "# obtain the corresponding sigmoid output NumPy array\n",
    "y2 = sigmoid (x)\n",
    "\n",
    "# draw step function with a solid line\n",
    "plt.plot (x, y1, label=\"step function\")\n",
    "\n",
    "# draw sigmoid function with a dashed line\n",
    "plt.plot (x, y2, linestyle = \"--\", label=\"sigmoid function\")\n",
    "\n",
    "# Label of the x axis\n",
    "plt.xlabel (\"inputs\")\n",
    "\n",
    "# Label of the y axis\n",
    "plt.ylabel (\"outputs\")\n",
    "\n",
    "# title\n",
    "plt.title ('step and sigmoid functions')\n",
    "\n",
    "plt.legend ()\n",
    "plt.show ()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the above, we can see that the sigmoid function is a smooth generalization of the step function in the following ways:\n",
    "\n",
    "1. Whereas the the step function can only output either a 0 or a 1, the sigmoid functions can output all possible values in the entire interval from 0 to 1.\n",
    "2. Both functions have the property that when the input is close to 0, the output is close to 0 or equal to 0, and when the input is close to 1, the output is close to or equal to 1.\n",
    "3. Both functions are *nonlinear*.\n",
    "\n",
    "Another popular activation function is the rectified linear unit (ReLU) function, which looks as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def relu (x):\n",
    "    '''given a numpy array, returns a numpy array that \n",
    "       maps each element of the input array to the result of \n",
    "       applying the ReLU function to that array element.\n",
    "    '''\n",
    "    return np.maximum (0, x)\n",
    "\n",
    "# create a NumPy array containing values from -5.0 to 5.0 in increments of 0.1\n",
    "x = np.arange (-5.0, 5.0, 0.1)\n",
    "\n",
    "# obtain the corresponding output NumPy array\n",
    "y = relu (x)\n",
    "\n",
    "# plot input and output arrays\n",
    "plt.plot (x, y)\n",
    "\n",
    "# specify the range of the y-axis\n",
    "plt.ylim (-0.1, 1.1)\n",
    "\n",
    "# title\n",
    "plt.title ('ReLU function')\n",
    "plt.show ()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Measuring the Error \n",
    "\n",
    "So far, we have seen that a neural network is a composition of many neurons, each of which involves the following:\n",
    "\n",
    "1. Some number of inputs.\n",
    "2. A different weight corresponding to each input.\n",
    "3. A sum of products that multiplies each input by its corresponding weight and then sums all of the products to obtain one number.\n",
    "4. An activation function that take the sum of products as input and returns one number as output.\n",
    "\n",
    "However, we still do not know how to automatically train such a network to compute a desired output. The key idea in automating this task is to measure the error of a neural network relative to the desired output, and to then adjust the weights of each neuron in the network based upon how far the output of the network is from the desired result. \n",
    "\n",
    "In other words, if we want to make progress towards learning the weights of the network in an automated way, we must formalize the distance of the networks output from the desired output. \n",
    "\n",
    "We measure the error of the network using a function called a *loss*, *cost* or *objective* function. There are *many* different kinds of loss functions that we can use to measure how well a given neural network is performing. \n",
    "\n",
    "One of the simplest loss functions is the *quadratic loss function*. This function subtracts the vector output of the network from the desired output and then squares the result. \n",
    "\n",
    "In Python, the quadratic loss function looks as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from mpl_toolkits.mplot3d import axes3d\n",
    "\n",
    "\n",
    "x_inputs = np.arange (-5,5, 0.1)\n",
    "y_inputs = np.arange (-5,5, 0.1)\n",
    "\n",
    "x, y = np.meshgrid (x_inputs, y_inputs)\n",
    "z = np.square (x - y)\n",
    "\n",
    "\n",
    "fig = plt.figure (figsize=(6,6))\n",
    "ax = fig.add_subplot (111, projection='3d')\n",
    "\n",
    "\n",
    "# Plot a 3D surface\n",
    "ax.plot_surface(x, y, z)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "At any given point in time, our error measurement will live somewhere on the above surface. Training a neural network works by iteratively adjusting the weights of the network such that over time, the measured error is as small as possible. \n",
    "\n",
    "Now that we understand the notion of measuring the error, we must learn how to find the inputs into the error function that correspond to the *smallest* output of the error function. For this, we will need differential calculus."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Finding the Minimum of a Function with the Derivative\n",
    "\n",
    "Above, we saw that to train a neural network, we need to minimize a function that takes at least two inputs and returns one output (i.e. it maps Rn -> R. However, before we can do this, we must learn how to minimize a function that takes just one input and returns one output (i.e. it maps R -> R).\n",
    "\n",
    "The primary mathematical tool that allows us to find the minimum of a function is the derivative. \n",
    "\n",
    "Conceptaully, the derivative is a higher-order function that takes one function as input and returns one function as output. \n",
    "\n",
    "The output of the derivative is a function that measures the rate of change at each input value of the input function.\n",
    "\n",
    "For example, consider the following function:\n",
    "\n",
    "- *f*: R -> R\n",
    "- *f* (x) = x\n",
    "\n",
    "The function *f* takes a real number as input and returns the same real number as output. For this reason, the function *f* is called the *identity function*.\n",
    "\n",
    "This function looks like a line when we plot it:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pylab as plt\n",
    "\n",
    "\n",
    "def identity_function (x):\n",
    "    '''given a numpy array, returns a numpy array that \n",
    "       maps each element of the input array to the result of \n",
    "       applying the identity function to that array element.\n",
    "    '''\n",
    "    return x\n",
    "\n",
    "# create a NumPy array containing values from -5.0 to 5.0 in increments of 0.1\n",
    "x = np.arange (-5.0, 5.0, 0.1)\n",
    "\n",
    "# obtain the corresponding output NumPy array\n",
    "y = identity_function (x)\n",
    "\n",
    "# plot input and output arrays\n",
    "plt.plot (x, y)\n",
    "\n",
    "# specify the range of the y-axis\n",
    "plt.ylim (-5.0, 5.0)\n",
    "\n",
    "# title\n",
    "plt.title ('identity function')\n",
    "plt.show ()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The derivative is a generalization of the notion of slope. In general, the slope between two input/output pairs of the form (x1, y1) and (x2, y2) is computed using the formla:\n",
    "\n",
    "slope = (y1 - y2) / (x2 - x1).\n",
    "\n",
    "We can compute the slope for any two such pairs, regardless of how far appart the two inputs x1 and x2 are from each other. \n",
    "\n",
    "In contrast, the derivative is computed by assuming that the two inputs are *arbitrarily close* to each other and then measuring the slope between the two corresponding input/output pairs.\n",
    "\n",
    "In the case of the identity function, the slope between any two arbitrarily close points is always the same. Therefore, when we feed the identity function into the derivative as input, we obtain as output a constant function that maps each input to the same output. In particular, we obtain the follwoing function as the derivative of the function *f*:\n",
    "\n",
    "- *g*: R -> R\n",
    "- *g* (x) = 1\n",
    "\n",
    "We can plot the functions *f* and *g* on the same graph to get a better sense of how they relate to each other:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def derivative_of_identity (x):\n",
    "    '''given a numpy array, `x` applies the derivative of the identity function \n",
    "       to each input and returns the result as a numpy array.'''\n",
    "    length = x.size\n",
    "    return np.ones (length)\n",
    "\n",
    "# create a NumPy array containing values from -5.0 to 5.0 in increments of 0.1\n",
    "x = np.arange (-5.0, 5.0, 0.1)\n",
    "\n",
    "# obtain the identity function\n",
    "y1 = identity_function (x)\n",
    "\n",
    "# obtain the derivative of the identity function as a NumPy array\n",
    "y2 = derivative_of_identity (y1)\n",
    "\n",
    "# draw identity function with a solid line\n",
    "plt.plot (x, y1, label=\"identity function\")\n",
    "\n",
    "# draw constant function with a dashed line\n",
    "plt.plot (x, y2, linestyle = \"--\", label=\"derivative of constant function\")\n",
    "\n",
    "# Label of the x axis\n",
    "plt.xlabel (\"inputs\")\n",
    "\n",
    "# Label of the y axis\n",
    "plt.ylabel (\"outputs\")\n",
    "\n",
    "# title\n",
    "plt.title ('step and sigmoid functions')\n",
    "\n",
    "plt.legend ()\n",
    "plt.show ()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we understand the basic concept of a derivative, let's consider how to compute the derivative for arbitrarily complex functions.\n",
    "\n",
    "A first naive approach is to simply add a very small amount to each input and then compute the slope based on the two inputs obtained in that way. Obtaining the derivative in this way is called *numerical differentiation*. \n",
    "\n",
    "This approach looks as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def numerical_derivative (f, x):\n",
    "    '''given a function `f` and a NumPy input vector `x`, \n",
    "    returns the derivative of f at all points in x'''\n",
    "    h = 1e-50\n",
    "    return (f(x+h) - f(x)) / h\n",
    "\n",
    "# create a NumPy array containing values from -5.0 to 5.0 in increments of 0.1\n",
    "x = np.arange (-5.0, 5.0, 0.1)\n",
    "\n",
    "# obtain the identity function\n",
    "y1 = identity_function (x)\n",
    "\n",
    "# obtain the derivative of the identity function as a NumPy array\n",
    "y2 = numerical_derivative (identity_function, x)\n",
    "\n",
    "# draw identity function with a solid line\n",
    "plt.plot (x, y1, label=\"identity function\")\n",
    "\n",
    "# draw constant function with a dashed line\n",
    "plt.plot (x, y2, linestyle = \"--\", label=\"derivative of constant function\")\n",
    "\n",
    "# Label of the x axis\n",
    "plt.xlabel (\"inputs\")\n",
    "\n",
    "# Label of the y axis\n",
    "plt.ylabel (\"outputs\")\n",
    "\n",
    "# title\n",
    "plt.title ('identity function and its derivative')\n",
    "\n",
    "plt.legend ()\n",
    "plt.show ()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So far, our approach is able to reproduce the same result we obtained above based on intuition. Let's see what happens if use our new tool to compute the derivative of the squaring function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def squaring_function (x):\n",
    "    return np.square (x)\n",
    "\n",
    "# create a NumPy array containing values from -5.0 to 5.0 in increments of 0.1\n",
    "x = np.arange (-5.0, 5.0, 0.1)\n",
    "\n",
    "# obtain the identity function outputs\n",
    "y1 = squaring_function (x)\n",
    "\n",
    "# obtain the derivative outputs of the identity function as a NumPy array\n",
    "y2 = numerical_derivative (squaring_function, x)\n",
    "\n",
    "# draw identity function with a solid line\n",
    "plt.plot (x, y1, label=\"squaring function\")\n",
    "\n",
    "# draw constant function with a dashed line\n",
    "plt.plot (x, y2, linestyle = \"--\", label=\"derivative of squaring function\")\n",
    "\n",
    "# Label of the x axis\n",
    "plt.xlabel (\"inputs\")\n",
    "\n",
    "# Label of the y axis\n",
    "plt.ylabel (\"outputs\")\n",
    "\n",
    "# title\n",
    "plt.title ('squaring function and its derivative')\n",
    "\n",
    "plt.legend ()\n",
    "plt.show ()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Wait! we got the wrong answer!\n",
    "\n",
    "It is known that the derivative of the squaring function is the function:\n",
    "\n",
    "- *f*: R -> R\n",
    "- *f* (x) = 2x\n",
    "\n",
    "However, the above computation gives the **false impression** that the derivative of the squaring function is the zero function that maps each input to zero! \n",
    "\n",
    "The reason for this discrepancy is *rounding error*.\n",
    "\n",
    "The following code snippet shows more clearly how such rounding error comes about:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.float32 (1e-50)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the above, we can see that *the machine is incapable of dealing with points that are arbitrarily close to each other*. This limitation is due to the fact that real numbers can only be represented with *infinite* decimals expansions, yet we can only every store a *finite* number of decimals places in the machine at any given time due to memory constraints.\n",
    "\n",
    "The first improvement we can make is to make the points farther apart from each other in our numerical computation of the derivative:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def numerical_derivative (f, x):\n",
    "    '''given a function `f` and a NumPy input vector `x`, \n",
    "    returns the derivative of f at all points in x'''\n",
    "    h = 1e-4\n",
    "    return (f (x + h) - f (x)) / h\n",
    "\n",
    "\n",
    "# create a NumPy array containing values from -5.0 to 5.0 in increments of 0.1\n",
    "x = np.arange (-5.0, 5.0, 0.1)\n",
    "\n",
    "# obtain the identity function outputs\n",
    "y1 = squaring_function (x)\n",
    "\n",
    "# obtain the derivative outputs of the identity function as a NumPy array\n",
    "y2 = numerical_derivative (squaring_function, x)\n",
    "\n",
    "# draw identity function with a solid line\n",
    "plt.plot (x, y1, label=\"squaring function\")\n",
    "\n",
    "# draw constant function with a dashed line\n",
    "plt.plot (x, y2, linestyle = \"--\", label=\"derivative of squaring function\")\n",
    "\n",
    "# Label of the x axis\n",
    "plt.xlabel (\"inputs\")\n",
    "\n",
    "# Label of the y axis\n",
    "plt.ylabel (\"outputs\")\n",
    "\n",
    "# title\n",
    "plt.title ('squaring function and its derivative')\n",
    "\n",
    "plt.legend ()\n",
    "plt.show ()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice that by using the larger step size of 10^-4 in our compuation of the derivative instead of our previous step size of 10^-50, we obtained the correct derivative of f(x) = 2x instead of f(x) = 0.\n",
    "\n",
    "A second improvement we can make to get more accurate results is to use the *central difference* in our compuation of the derivative, which takes into account both what happens if we *add* a small amount to any input, or if we *subtract* a small amount from any input:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def numerical_derivative (f, x):\n",
    "    '''given a function `f` and a NumPy input vector `x`, \n",
    "    returns the derivative of f at all points in x'''\n",
    "    h = 1e-4 \n",
    "    return (f(x+h) - f(x-h)) / (2*h)\n",
    "\n",
    "# create a NumPy array containing values from -5.0 to 5.0 in increments of 0.1\n",
    "x = np.arange (-5.0, 5.0, 0.1)\n",
    "\n",
    "# obtain the identity function outputs\n",
    "y1 = squaring_function (x)\n",
    "\n",
    "# obtain the derivative outputs of the identity function as a NumPy array\n",
    "y2 = numerical_derivative (squaring_function, x)\n",
    "\n",
    "# draw identity function with a solid line\n",
    "plt.plot (x, y1, label=\"squaring function\")\n",
    "\n",
    "# draw constant function with a dashed line\n",
    "plt.plot (x, y2, linestyle = \"--\", label=\"derivative of squaring function\")\n",
    "\n",
    "# Label of the x axis\n",
    "plt.xlabel (\"inputs\")\n",
    "\n",
    "# Label of the y axis\n",
    "plt.ylabel (\"outputs\")\n",
    "\n",
    "# title\n",
    "plt.title ('squaring function and its derivative')\n",
    "\n",
    "plt.legend ()\n",
    "plt.show ()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we understand how to compute the derivaitve of a function that takes one input and returns one output, let's consider how we can use the derivaitve as a tool to help us find the input into a function that corresponds to the smallest output.\n",
    "\n",
    "As an example, consider the following function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def f (x):\n",
    "    '''some complicated function'''\n",
    "    return 6*x**4 + 2*x**3 -4*x**2 - 12*x + 3\n",
    "\n",
    "# create a NumPy array containing values from -5.0 to 5.0 in increments of 0.1\n",
    "x = np.arange (-5.0, 5.0, 0.1)\n",
    "\n",
    "# obtain the function outputs for f\n",
    "y = f (x)\n",
    "\n",
    "# draw identity function with a solid line\n",
    "plt.plot (x, y, label=\"some complicated function\")\n",
    "\n",
    "# Label of the x axis\n",
    "plt.xlabel (\"inputs\")\n",
    "\n",
    "# Label of the y axis\n",
    "plt.ylabel (\"outputs\")\n",
    "\n",
    "# title\n",
    "plt.title ('some complicated function')\n",
    "\n",
    "plt.legend ()\n",
    "plt.show ()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, suppose that we want to find the input into the above function *f* that yields the smallest output value. It turns out that we can use the derivative to solve this minimization problem.\n",
    "\n",
    "The following code snippet demonstrates the basic idea:\n",
    "\n",
    "The algorithm that uses the derivative to solve this minimization problem is called the *gradient descent algorithm*. To demonstrate how gradient descent works, we will pretend that we already know the derivative of our complicated function from the standard rules of calculus:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def derivative_of_complicated_function (x):\n",
    "    return 12 * x - 12\n",
    "\n",
    "x = np.arange (-5.0, 5.0, 0.1)\n",
    "\n",
    "# Label of the x axis\n",
    "plt.xlabel (\"inputs\")\n",
    "\n",
    "# Label of the y axis\n",
    "plt.ylabel (\"outputs\")\n",
    "\n",
    "# title\n",
    "plt.title ('some complicated function')\n",
    "plt.plot(x,f(x))\n",
    "\n",
    "\n",
    "# define starting input and step size for each iteration\n",
    "current_input = -4.0\n",
    "step_size = 0.03\n",
    "\n",
    "for i in range (15):\n",
    "    plt.plot(current_input, f(current_input), marker='o', color='r')\n",
    "    current_input = current_input - step_size * derivative_of_complicated_function (current_input)\n",
    "\n",
    "print (f'the minimum of the function is approximately: {current_input}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the above, we can see that after only 15 iterations, the above gradient descent algorithm was able to zero-in on the input value which yields the smallest output value for our function. When an algorithm gives us the result we want in a relatively small number of iterations, we say that it *converges rapidly*. If we want a more accurate result, we can increase the number of iterations:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = np.arange (-5.0, 5.0, 0.1)\n",
    "\n",
    "# Label of the x axis\n",
    "plt.xlabel (\"inputs\")\n",
    "\n",
    "# Label of the y axis\n",
    "plt.ylabel (\"outputs\")\n",
    "\n",
    "# title\n",
    "plt.title ('some complicated function')\n",
    "plt.plot (x,f(x))\n",
    "\n",
    "# define starting input and step size for each iteration\n",
    "current_input = -4.0\n",
    "step_size = 0.03\n",
    "\n",
    "for i in range (100):\n",
    "    plt.plot(current_input, f(current_input), marker='o', color='r')\n",
    "    current_input = current_input - step_size * derivative_of_complicated_function (current_input)\n",
    "\n",
    "print (f'the minimum of the function is approximately: {current_input}')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Analytically, we know that the minumum of a function can be found by finding which input causes its derivative to return 0. Since the derivative of f is the function g (x) = 12 * x - 12, we know that plugging in 1 to the function g will return a result of 0. Therefore, we can see that our above gradient descent algorithm agrees very closely with the result we would have obtained analytically."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we know how to solve the minimization for functions that take one input and return one input, we can consider how to solve the minimzation problem for functions that take two inputs and return one input. This generalized version of the gradient descent algorithm depends upon the notion of a *partial derivative*, so we'll take a quick detour into the realm of partial derivatives and then return to implement our generalized gradient descent algorithm."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Partial Derivatives and Generalized Gradient Descent\n",
    "\n",
    "In the case of a function that takes more than one input, we can add a small amount to any of the inputs, and measure the resulting change in the function's output. \n",
    "\n",
    "The partial derivative allows us to vary just one input at a time and measure the resulting change in the function's output. In the case of computing the partial derivative, it is easier to use *symbolic computing* than numerical computing to compute the various partial derivatives of a function.\n",
    "\n",
    "We can define a function symbolically and then apply it to an input as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sympy import *\n",
    " \n",
    "# create a \"symbol\" called x\n",
    "x = Symbol ('x')\n",
    " \n",
    "# define a symbolic function\n",
    "f = x ** 2\n",
    "\n",
    "print ('the function is:', f)\n",
    "\n",
    "# obtain a usuable function from the above symbolic function\n",
    "f1 = lambdify (x, f)\n",
    "\n",
    "# pass an input to the usuable function\n",
    "print ('f (4) is:', f1 (2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we know how to use symbolically defined functions, we can find the symbolic derivative of a function and then apply that derivative to an input:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# define x as a symbol that will be used\n",
    "x = Symbol ('x')\n",
    "\n",
    "# define a symbolic function using the above symbol\n",
    "f = x ** 5\n",
    "\n",
    "print ('original function is:', f)\n",
    "\n",
    "derivative_f = f.diff (x)\n",
    "\n",
    "print ('derivative of the function is:', derivative_f)\n",
    "\n",
    "# obtain a usuable function from the above symbolic function\n",
    "f1 = lambdify (x, derivative_f)\n",
    "\n",
    "print ('derivative applied to the input 2 is:', f1 (2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's now apply these tools to a function that takes two inputs and compute the parital derivatives of that function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x , y = symbols ('x y')\n",
    "f = x ** 2 + y ** 2\n",
    "\n",
    "print ('original function is:', f)\n",
    "\n",
    "# fnd the partial derivative of f with respect to its first input\n",
    "partial_derivative_wrt_x = f.diff (x)\n",
    "\n",
    "print ('partial derivative of f with respect to x is:', partial_derivative_wrt_x)\n",
    "\n",
    "# fnd the partial derivative of f with respect to its second input\n",
    "partial_derivative_wrt_y = f.diff (y)\n",
    "\n",
    "print ('partial derivative of f with respect to y is:', partial_derivative_wrt_y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Although we can use sympy to compute partial derivatives, this process is even easier with the *autograd* library, since it does not require us to define symbols, and does not work with algebraic experssions, which can potentially consume large amounts of memory. \n",
    "\n",
    "As a start, we first show how to copmute the derivative of a function that takes one input and returns one output using autograd:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# thinly wrapped numpy library\n",
    "import autograd.numpy as np\n",
    "# main workhorse of autograd\n",
    "from autograd import grad\n",
    "\n",
    "# define a function like normal with Python and Numpy\n",
    "def square (x):\n",
    "    return np.square (x)\n",
    "\n",
    "# create a function to compute the gradient\n",
    "square_derivative = grad (square)\n",
    "\n",
    "# evaluate the derivative at a particular input\n",
    "print ('when the input to the derivative of the square function is 4.0, the output is:', square_derivative (4.0) )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we are dealing with a function that takes more than one input and returns one output, then we can use autograd to compute the partial derivatives of that function. Autograd takes the persepctive that a function of multiple inputs can be seen as a function that takes just one vector input.\n",
    "\n",
    "For example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def f (x, y):\n",
    "    return np.square (x) + np.square (y)\n",
    "\n",
    "# compute the parital derivative of f w.r.t the first input\n",
    "first_partial = grad(f, 0)\n",
    "\n",
    "# compute the parital derivative of f w.r.t the second input\n",
    "second_partial = grad (f, 1)\n",
    "\n",
    "print ('first partial applied to (2.0, 3.0) is:', first_partial (2.0, 3.0))\n",
    "print ('second partial applied to (2.0, 3.0) is:', second_partial (2.0, 3.0))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We could have acheived a similar result ourselves using numerical differentiation as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def first_partial_custom (f, x, y):\n",
    "    '''given a function `f` and two inputs, \n",
    "       computes the partial derivative with respect to the first input.'''\n",
    "    h = 1e-4\n",
    "    return (f(x + h, y) - f(x, y)) / h\n",
    "\n",
    "def second_partial_custom (f, x, y):\n",
    "    '''given a function `f` and two inputs, \n",
    "       computes the partial derivative with respect to the second input.'''\n",
    "    h = 1e-4\n",
    "    return (f (x, y + h) - f (x, y)) / h\n",
    "\n",
    "print ('first partial applied to (2.0, 3.0) is:', np.round (first_partial_custom (f, 2.0, 3.0), 2))\n",
    "print ('second partial applied to (2.0, 3.0) is:', np.round (second_partial_custom (f, 2.0, 3.0), 2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we understand how to compute partial derivatives in Python, we can generlize our previous gradient descent algorithm to any function that takes n inputs and returns one output. The algorithm for generalized gradient descent is very similar to our previous gradient descent algorithm, except that it uses partial derivatives instead of one regular derivative. \n",
    "\n",
    "For example, in the case of our function f above, it is intuitively clear that the input of this function which yields the smallest output is the ordered pair (0,0), since any number squared is always positive. \n",
    "\n",
    "We can verify this intuition using the generalized gradient descent algorithm:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def f (x, y):\n",
    "    return np.square (x) + np.square (y)\n",
    "\n",
    "# define starting input and step size for each iteration\n",
    "current_x = -4.0\n",
    "current_y = 5.0\n",
    "step_size = 0.03\n",
    "\n",
    "# compute the parital derivative of f w.r.t the first input\n",
    "first_partial = grad(f, 0)\n",
    "\n",
    "# compute the parital derivative of f w.r.t the second input\n",
    "second_partial = grad (f, 1)\n",
    "\n",
    "# iterate as many times as required to reach convergenece\n",
    "for i in range (150):\n",
    "    current_x = current_x - step_size * first_partial (current_x, current_y)\n",
    "    current_y = current_y - step_size * second_partial (current_x, current_y)\n",
    "\n",
    "print (f'the minimum of the function is approximately: ({abs(np.round(current_x, 2))}, {np.round(current_y, 2)})')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To visualize how gradient descent works in the case of a function that takes two inputs and returns one output would usually require a 3-dimensional plot. However, we can accomplish the same goal in two dimensions using a contour plot:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def f (x, y):\n",
    "    return np.square (x) + np.square (y)\n",
    "\n",
    "N = 100\n",
    "x,y = np.meshgrid (np.linspace (-5, 5, N), np.linspace (-5,5,N))\n",
    "z = f (x,y)\n",
    "plt.contourf(x,y,z,10, cmap=\"Greys\")\n",
    "plt.contour(x,y,z,10, colors='k', linewidths=1)\n",
    "plt.title ('some complicated function')\n",
    "\n",
    "# define starting input and step size for each iteration\n",
    "current_x = -4.0\n",
    "current_y = 5.0\n",
    "step_size = 0.03\n",
    "\n",
    "# compute the parital derivative of f w.r.t the first input\n",
    "first_partial = grad (f, 0)\n",
    "\n",
    "# compute the parital derivative of f w.r.t the second input\n",
    "second_partial = grad (f, 1)\n",
    "\n",
    "# iterate as many times as required to reach convergenece\n",
    "for i in range (150):\n",
    "    plt.plot([current_x, current_x],[current_y, current_y], marker='o', linestyle='dotted', color='k')    \n",
    "    current_x = current_x - step_size * first_partial (current_x, current_y)\n",
    "    current_y = current_y - step_size * second_partial (current_x, current_y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the above countour plot, we can see that our function f has the shape of a bowl, and the generalized gradient descent algorithm is able to climb down the sides of the bowl and to figure out that the bottom of the bowl lives at the point (0, 0, 0) in R3."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We now have all the conceptual tools we need to start building a neural network than can automatically learn the weights required to compute a desired function.\n",
    "\n",
    "## Training a Neural Network\n",
    "\n",
    "Above, we saw that the XOR function can be computed by composing perceptrons for the OR, AND and NAND functions and *manually* selecting appropriate weights for each perceptron. In this section, we will see that these weights can be learned *automatically*.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Above, we saw that we can train each perceptron independently and then compose the perceptrons after training. However, in general, *we don't know beforehand how to compose the nodes of our network to compute a given function*. \n",
    "\n",
    "As a result, we *generally need to train all of the nodes in our network together*. The primary tool for training all of the nodes in a neural network together is the *backpropagation algorithm*."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For input [1, 0] output is 1\n",
      "For input [0, 0] output is 0\n",
      "For input [0, 1] output is 1\n",
      "For input [1, 1] output is 0\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# based on https://github.com/shayanalibhatti/Coding-neural_network-for-XOR-logic-from-scratch/blob/master/neural_network_xor_logic_from_scratch.ipynb\n",
    "\n",
    "# TODO: use a class\n",
    "# TODO: use autograd\n",
    "\n",
    "# These are XOR inputs\n",
    "x = np.array([[0,0,1,1],[0,1,0,1]])\n",
    "\n",
    "# These are XOR outputs\n",
    "y = np.array([[0,1,1,0]])\n",
    "\n",
    "# Number of inputs\n",
    "n_x = 2\n",
    "\n",
    "# Number of neurons in output layer\n",
    "n_y = 1\n",
    "\n",
    "# Number of neurons in hidden layer\n",
    "n_h = 2\n",
    "\n",
    "# Total training examples\n",
    "m = x.shape[1]\n",
    "\n",
    "# Learning rate\n",
    "lr = 0.1\n",
    "\n",
    "# Define random seed for consistent results\n",
    "np.random.seed (2)\n",
    "\n",
    "# Define weight matrices for neural network\n",
    "w1 = np.random.rand (n_h,n_x)   # Weight matrix for hidden layer\n",
    "w2 = np.random.rand (n_y,n_h)   # Weight matrix for output layer\n",
    "\n",
    "# I didnt use bias units\n",
    "# We will use this list to accumulate losses\n",
    "losses = []\n",
    "\n",
    "# I used sigmoid activation function for hidden layer and output\n",
    "def sigmoid (z):\n",
    "    z = 1 / (1 + np.exp (-z))\n",
    "    return z\n",
    "\n",
    "# Forward propagation\n",
    "def forward_prop (w1,w2,x):\n",
    "    z1 = np.dot (w1,x)\n",
    "    a1 = sigmoid (z1)   \n",
    "    \n",
    "    z2 = np.dot (w2,a1)\n",
    "    a2 = sigmoid (z2)\n",
    "    return z1,a1,z2,a2\n",
    "\n",
    "# Backward propagation\n",
    "def back_prop (m,w1,w2,z1,a1,z2,a2,y):\n",
    "    \n",
    "    dz2 = a2 - y\n",
    "    dw2 = np.dot (dz2,a1.T) / m\n",
    "    dz1 = np.dot (w2.T, dz2) * a1 * (1 - a1)\n",
    "    dw1 = np.dot (dz1, x.T) / m\n",
    "    dw1 = np.reshape (dw1, w1.shape)\n",
    "    \n",
    "    dw2 = np.reshape (dw2, w2.shape)    \n",
    "    return dz2,dw2,dz1,dw1\n",
    "\n",
    "iterations = 10000\n",
    "for i in range (iterations):\n",
    "    z1, a1, z2, a2 = forward_prop (w1, w2, x)\n",
    "    loss = -(1/m)*np.sum(y*np.log(a2)+(1-y)*np.log(1-a2))\n",
    "    losses.append (loss)\n",
    "    da2, dw2, dz1, dw1 = back_prop (m, w1, w2, z1, a1, z2, a2, y)\n",
    "    w2 = w2-lr * dw2\n",
    "    w1 = w1-lr *dw1\n",
    "\n",
    "# We plot losses to see how our network is doing\n",
    "plt.plot (losses)\n",
    "plt.xlabel (\"EPOCHS\")\n",
    "plt.ylabel (\"Loss value\")\n",
    "\n",
    "def predict (w1,w2,input):\n",
    "    z1, a1, z2, a2 = forward_prop(w1, w2, test)\n",
    "    a2 = np.squeeze (a2)\n",
    "    if a2 >= 0.5:\n",
    "        print (\"For input\", [i[0] for i in input], \"output is 1\")# ['{:.2f}'.format(i) for i in x])\n",
    "    else:\n",
    "        print (\"For input\", [i[0] for i in input], \"output is 0\")\n",
    "        \n",
    "test = np.array ([[1],[0]])\n",
    "predict (w1,w2,test)\n",
    "test = np.array ([[0],[0]])\n",
    "predict (w1,w2,test)\n",
    "test = np.array ([[0],[1]])\n",
    "predict (w1,w2,test)\n",
    "test = np.array ([[1],[1]])\n",
    "predict (w1,w2,test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
